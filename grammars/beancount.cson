fileTypes: [
  'beancount',
  'bean',
  'ledger'
]
name: 'Beancount'
patterns: [
  {
    comment: 'Commented text'
    # Match lines/substrings starting with any of ';', '*', '#'
    match: '[;\*#].*'
    name: 'comment.line.beancount'
  }, {
    captures:
      '1':
        name: 'constant.language.beancount'
      '2':
        name: 'punctuation.separator.beancount'
    comment: 'Root Accounts'
    match: '\\s([A-Z][A-Za-z0-9\\-]+)(:)'
  }, {
    # Support account names that are only one character long
    begin: '([:]?)([A-Z][A-Za-z0-9\\-]*)'
    beginCaptures:
      '1':
        name: 'punctuation.separator.beancount'
      '2':
        name: 'variable.account.beancount'
    comment: 'Accounts'
    end: '([:]?)|(\\s)'
    patterns: [
      {
        include: '$self'
      }
    ]
  }, {
    comment: 'strings'
    match: '\\".*\\"'
    name: 'string.quoted.double.beancount'
  }, {
    captures:
      '1':
        name: 'support.function.directive.option.beancount'
      '2':
        name: 'support.variable.language.option.beancount'
      '3':
        name: 'variable.other.option.beancount'
    comment: 'Option directives'
    match: '^(option)\\s*(\\".*\\")\\s*(\\".*\\")\\s*'
    name: 'meta.directive.option.beancount'
  }, {
    captures:
      '1':
        name: 'support.function.directive.include.beancount'
      '2':
        name: 'variable.other.include.beancount'
      '3':
        name: 'support.class.include.beancount'
    comment: 'Include directives'
    match: '^(include)\\s*(".*")\\s*'
    name: 'meta.directive.include.beancount'
  }, {
    captures:
      '1':
        name: 'support.function.directive.plugin.beancount'
      '2':
        name: 'variable.other.plugin.beancount'
      '3':
        name: 'support.class.plugin.beancount'
    comment: 'Plugin directives'
    match: '^(plugin)\\s*(".*")\\s*'
    name: 'meta.directive.plugin.beancount'
  }, {
    comment: 'Directives (no date)'
    match: '^(poptag|pushtag)\\s'
    name: 'keyword.operator.directive.beancount'
  }, {
    comment: 'Currencies'
    match: '\\s([A-Z][A-Z0-9\\"\\.\\_\\-]{0,10}[A-Z0-9])[\\,?|\\s]'
    name: 'variable.other.currency.beancount'
  }, {
    captures:
      '1':
        name: 'constant.numeric.date.year.beancount'
      '2':
        name: 'constant.numeric.date.month.beancount'
      '3':
        name: 'constant.numeric.date.day.beancount'
      '4':
        name: 'support.function.directive.beancount'
    comment: 'Dated directives'
    match: '([0-9]{4})\\-([0-9]{2})\\-([0-9]{2})\\s(open|close|pad|balance|note|price|event|document|commodity|custom)'
  }, {
    begin: '([0-9]{4})\\-([0-9]{2})\\-([0-9]{2})(\\stxn)?\\s'
    beginCaptures:
      '1':
        name: 'constant.numeric.date.year.beancount'
      '2':
        name: 'constant.numeric.date.month.beancount'
      '3':
        name: 'constant.numeric.date.day.beancount'
      '4':
        name: 'support.function.directive.beancount'
    comment: 'Transactions'
    # Links and tags shall be included. But it's hard to do so in regexp.
    # Those capture at least capture majorities of cases.
    end: '\\s+(".*")\\s+(\\|)\\s+(".*")\\s*|\\s+(".*")\\s+(".*")\\s*|\\s+(".*")\\s*|\\s*$'
    endCaptures:
      '1':
        name: 'meta.structure.dictionary.payee.beancount'
      '2':
        name: 'invalid.deprecated.separator.beancount'
      '3':
        name: 'string.quoted.narration.beancount'
      '4':
        name: 'meta.structure.dictionary.payee.beancount'
      '5':
        name: 'string.quoted.narration.beancount'
      '6':
        name: 'string.quoted.narration.beancount'
    patterns: [
      {
        match: '\\!'
        name: 'keyword.operator.flag.beancount'
      }, {
        match: '\\*'
        name: 'keyword.operator.mark.beancount'
      }
    ]
  }, {
    comment: 'flag'
    match: '\\!\\s'
    name: 'keyword.other.beancount'
  }, {
    comment: 'Price assignment'
    match: '\\@'
    name: 'keyword.operator.assignment.beancount'
  }, {
    # Beancount supports a default cost assignment of '{}',
    # which will average across all lots, or whatever 'option' you selected.
    comment: 'cost assignment: default strategy'
    match: '\\{\\}'
    name: 'keyword.operator.assignment.beancount'
  }, {
    # Add support for an extended cost assignment.
    # This only supports the initial parts of '{# 240.00 USD, 2020-02-02, "lot name"}';
    # the detailed lot dates/names aren't highlighted at all.
    comment: 'detailed cost assignment'
    begin: '(\\{[#]?)\\s+([\\d]+[\\.]?[\\d]*)\\s+([A-Z][A-Z0-9\\"\\.\\_\\-]{0,10}[A-Z0-9])'
    beginCaptures:
      '1':
        name: 'keyword.operator.assignment.beancount'
      '2':
        name: 'constant.numeric.currency.beancount'
      '3':
        name: 'variable.other.currency.beancount'
    end: '(\\})'
    endCaptures:
      '1':
        name: 'keyword.operator.assignment.beancount'
    patterns: [
      {
        match: '\\/'
        name: 'keyword.operator.assignment.beancount'
      }
    ]
  }, {
    comment: 'fallback cost assignment (lacks highlighting within braces)'
    begin: '(\\{)'
    beginCaptures:
      '1':
        name: 'keyword.operator.assignment.beancount'
    end: '(\\})'
    endCaptures:
      '1':
        name: 'keyword.operator.assignment.beancount'
    patterns: [
      {
        match: '\\/'
        name: 'keyword.operator.assignment.beancount'
      }
    ]
  }, {
    captures:
      '2':
        name: 'entity.name.tag.beancount'
    comment: 'Tags'
    match: '(#)([A-Za-z0-9\\-_/.]+)'
  }, {
    captures:
      '2':
        name: 'entity.other.link.beancount'
    comment: 'Links'
    match: '(\\^)([A-Za-z0-9\\-_/.]+)'
  }, {
    captures:
      '1':
        name: 'keyword.operator.modifier.beancount'
      '2':
        name: 'constant.numeric.currency.beancount'
    comment: 'numbers'
    match: '([\\-|\\+]?)([\\d]+[\\.]?[\\d]*)'
  }, {
    comment: 'Illegal'
    match: '[^\\s}]'
    name: 'invalid.illegal.unrecognized.beancount'
  }, {
    begin: '^\\s{2,}([a-z][A-Za-z0-9\\-_]+):'
    beginCaptures:
      '1':
        name: 'support.other.metadata.key.beancount'
    comment: 'Metadata'
    end: '\\s*(.*)$'
    endCaptures:
      '1':
        name: 'variable.other.metadata.value.beancount'
  }
]
repository:
  'account-names':
    match: '([A-Z][A-Za-z0-9\\-]+)'
  dates:
    captures:
      '1':
        name: 'constant.numeric.date.year.beancount'
      '2':
        name: 'punctuation.separator.beancount'
      '3':
        name: 'constant.numeric.date.month.beancount'
      '4':
        name: 'punctuation.separator.beancount'
      '5':
        name: 'constant.numeric.date.day.beancount'
    match: '([0-9]{4})(\\-)([0-9]{2})(\\-)([0-9]{2})'
  numbers:
    captures:
      '1':
        name: 'keyword.operator.modifier.beancount'
      '2':
        name: 'constant.numeric.currency.beancount'
    match: '([\\-|\\+]?)([\\d]+[\\.]?[\\d]*)'
scopeName: 'source.beancount'
